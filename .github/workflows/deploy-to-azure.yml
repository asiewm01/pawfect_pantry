name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Azure ACR Login
      run: az acr login --name ${{ secrets.ACR_NAME }}

    - name: Build and Push Django Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/django-api ./django_project
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/django-api

    - name: Build and Push React Image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/react-ui ./frontend
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/react-ui

    - name: Deploy React UI to Container App
      run: |
        az containerapp show \
          --name react-ui \
          --resource-group ${{ secrets.RESOURCE_GROUP }} > /dev/null 2>&1 || \
        az containerapp create \
          --name react-ui \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ${{ secrets.ACR_NAME }}.azurecr.io/react-ui \
          --environment ${{ secrets.CONTAINERAPPS_ENV }} \
          --target-port 80 \
          --ingress external \
          --registry-server ${{ secrets.ACR_NAME }}.azurecr.io

        az containerapp update \
          --name react-ui \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ${{ secrets.ACR_NAME }}.azurecr.io/react-ui

    - name: Deploy Django API to Container App (with env vars)
      run: |
        exists=$(az containerapp show \
          --name django-api \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --query "name" -o tsv || echo "")

        if [ -z "$exists" ]; then
          echo "Creating django-api container app..."
          az containerapp create \
            --name django-api \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/django-api \
            --environment ${{ secrets.CONTAINERAPPS_ENV }} \
            --target-port 8000 \
            --ingress external \
            --registry-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --set-env-vars \
              USE_SQLITE=False \
              ENV=azure \
              SECRET_KEY=${{ secrets.SECRET_KEY }} \
              ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
              DEBUG=${{ secrets.DEBUG }} \
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              DB_NAME=${{ secrets.DB_NAME }} \
              DB_USER=${{ secrets.DB_USER }} \
              DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              DB_HOST=${{ secrets.DB_HOST }} \
              DB_PORT=${{ secrets.DB_PORT }} \
              EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }} \
              EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
              EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
              EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} \
              EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
              EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
              DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
        else
          echo "Updating django-api container app..."
          az containerapp update \
            --name django-api \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/django-api \
            --set-env-vars \
              USE_SQLITE=False \
              ENV=azure \
              SECRET_KEY=${{ secrets.SECRET_KEY }} \
              ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
              DEBUG=${{ secrets.DEBUG }} \
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              DB_NAME=${{ secrets.DB_NAME }} \
              DB_USER=${{ secrets.DB_USER }} \
              DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              DB_HOST=${{ secrets.DB_HOST }} \
              DB_PORT=${{ secrets.DB_PORT }} \
              EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }} \
              EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
              EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
              EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} \
              EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
              EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
              DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
        fi

